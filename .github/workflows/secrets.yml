name: Sync GH Secrets to AWS SM with Ignore List (Env Var Auth)

on:
  push:
    branches:
      - main

jobs:
  sync_secrets_minimal:
    name: Sync Secrets to AWS SM (Ignoring Specific Secrets)
    runs-on: ubuntu-latest
    env:
      AWS_REGION: 'eu-central-1'
      # REMOVED AWS keys from ignore list - they are needed for auth!
      SECRETS_TO_IGNORE: "GITHUB_TOKEN" # Only ignore GITHUB_TOKEN now

    steps:
      # Step to configure AWS credentials is REMOVED

      - name: Step 1 - Get All Secret Names
        id: get_names
        # This step doesn't need AWS creds or all secrets, only the JSON map
        env:
          GITHUB_SECRETS_JSON: ${{ toJSON(secrets) }}
        run: |
          echo "Extracting all available secret names..."
          names_output="" # Default to empty string
          if [ -n "$GITHUB_SECRETS_JSON" ] && [ "$GITHUB_SECRETS_JSON" != "{}" ]; then
            # Use jq to get keys, join them into a single space-separated string
            names_output=$(echo "$GITHUB_SECRETS_JSON" | jq -r 'keys | join(" ")')
            echo "Found names."
          else
            echo "No secrets found or JSON empty."
          fi
          # Set the output variable 'names_list' for the next step
          echo "names_list=${names_output}" >> $GITHUB_OUTPUT
          echo "Outputting names_list: ${names_output}" # Log what is being outputted

      # OPTIONAL BUT RECOMMENDED: Verify AWS CLI can authenticate
      - name: Verify AWS Credentials via Env Vars
        # This step NEEDS the secrets loaded into the environment for the AWS CLI
        env: ${{ secrets }}
        run: |
          echo "Attempting to verify AWS credentials using environment variables..."
          if [ -z "$AWS_ACCESS_KEY_ID" ] || [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
            echo "Error: AWS_ACCESS_KEY_ID or AWS_SECRET_ACCESS_KEY not found in environment."
            echo "Ensure they are defined in GitHub Secrets and 'env: \${{ secrets }}' is used."
            exit 1
          else
            echo "AWS_ACCESS_KEY_ID found (masked in logs)."
            # AWS CLI automatically uses AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION
            aws sts get-caller-identity
            echo "AWS CLI authentication successful."
          fi

      - name: Step 2 - Sync Secrets to AWS (Applying Ignore List)
        # This step NEEDS all secrets loaded for the sync logic AND AWS creds for the CLI
        env: ${{ secrets }}
        run: |
          echo "Starting sync process (with ignore list)..."
          # Uses AWS credentials (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY) from env vars automatically
          # Uses AWS_REGION from job-level env vars automatically
          echo "Ignoring secrets named: $SECRETS_TO_IGNORE"
          echo "WARNING: This relies on undocumented behavior ('env: \${{ secrets }}')."
          echo "WARNING: Errors from AWS CLI will be ignored!"

          # Get the list of names from the previous step's output
          names_to_sync="${{ steps.get_names.outputs.names_list }}"

          if [ -z "$names_to_sync" ]; then
            echo "No secret names passed from Step 1. Exiting."
            exit 0
          fi

          echo "Will attempt to sync secrets named: $names_to_sync"

          # Loop through all potential secret names passed from Step 1
          for secret_name in $names_to_sync; do

            # --- Ignore List Check ---
            # We pad both the list and the name with spaces for safer whole-word matching
            if echo " $SECRETS_TO_IGNORE " | grep -q " $secret_name "; then
              echo "Skipping sync for: $secret_name (in ignore list defined by SECRETS_TO_IGNORE env var)"
              continue # Skip to the next secret name
            fi
            # --- End Ignore List Check ---

            # --- Crucial Check: Skip AWS Auth Keys ---
            # Even though removed from SECRETS_TO_IGNORE, we explicitly avoid syncing the keys used for auth
            if [ "$secret_name" = "AWS_ACCESS_KEY_ID" ] || [ "$secret_name" = "AWS_SECRET_ACCESS_KEY" ]; then
              echo "Skipping sync for: $secret_name (Used for authentication)"
              continue # Skip to the next secret name
            fi
            # --- End AWS Auth Key Check ---

            # Get value via BASH indirect expansion. Relies on 'env: ${{ secrets }}'
            secret_value="${!secret_name}"

            # Skip secrets if their value IS TRULY empty OR if it wasn't populated in env
            # (e.g., if a secret listed in get_names wasn't actually loaded by env: ${{ secrets }})
            if [ -z "$secret_value" ]; then
               echo "Skipping sync for: $secret_name (Value is empty OR env var not populated)"
               continue # Go to the next secret name
            fi

            echo "Attempting sync for: $secret_name"

            # Blunt "Upsert": Try create, ignore result, then try put, ignore result
            aws secretsmanager create-secret --name "$secret_name" --secret-string "$secret_value" --region "$AWS_REGION" || true
            aws secretsmanager put-secret-value --secret-id "$secret_name" --secret-string "$secret_value" --region "$AWS_REGION" || true
          done

          echo "Sync attempt finished (with ignore list applied). Check AWS Secrets Manager manually."