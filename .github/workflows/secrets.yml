name: Minimal Sync GH Secrets to AWS SM (IAM User) - Two Step Fix

on:
  push:
    branches:
      - main # Consider changing to 'on: workflow_dispatch:' for manual control

jobs:
  sync_secrets_minimal:
    name: Minimal Sync Secrets to AWS SM (IAM User)
    runs-on: ubuntu-latest
    env:
      # AWS Region is set globally for the job
      AWS_REGION: 'eu-central-1'

    steps:
      - name: Configure AWS Credentials (IAM User)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # --- Step 1: Get the list of secret names ---
      - name: Step 1 - Get Secret Names
        id: get_names # Assign an ID so Step 2 can reference its outputs
        env:
          # Define JSON only for this step
          GITHUB_SECRETS_JSON: ${{ toJSON(secrets) }}
        run: |
          echo "Extracting secret names..."
          names_output="" # Default to empty string
          if [ -n "$GITHUB_SECRETS_JSON" ] && [ "$GITHUB_SECRETS_JSON" != "{}" ]; then
            # Use jq to get keys, join them into a single space-separated string
            # Ensure names don't have spaces themselves (usually true for secrets)
            names_output=$(echo "$GITHUB_SECRETS_JSON" | jq -r 'keys | join(" ")')
            echo "Found names to process."
          else
            echo "No secrets found or JSON empty."
          fi
          # Set the output variable 'names_list' for the next step
          echo "names_list=${names_output}" >> $GITHUB_OUTPUT
          echo "Outputting names_list: ${names_output}" # Log what is being outputted

      # --- Step 2: Sync secrets using names from Step 1 and values from env ---
      - name: Step 2 - Sync Secrets to AWS
        # This step uses the standalone 'env: ${{ secrets }}' syntax
        # This relies on the undocumented behavior to populate env vars ($SECRET_NAME)
        env: ${{ secrets }}
        run: |
          echo "Starting sync process..."
          echo "WARNING: This relies on undocumented GitHub Actions behavior ('env: \${{ secrets }}')."
          echo "WARNING: Errors from AWS CLI will be ignored!"

          # Get the list of names from the previous step's output
          names_to_sync="${{ steps.get_names.outputs.names_list }}"

          if [ -z "$names_to_sync" ]; then
            echo "No secret names passed from Step 1. Exiting."
            exit 0
          fi

          echo "Will attempt to sync secrets named: $names_to_sync"

          # Loop through the space-separated list of names
          for secret_name in $names_to_sync; do
            # Get value via BASH indirect expansion. This relies on
            # 'env: ${{ secrets }}' having populated this step's environment.
            secret_value="${!secret_name}"

            # Skip secrets if their value IS TRULY empty OR if it wasn't populated in env
            if [ -z "$secret_value" ]; then
               echo "Skipping sync for: $secret_name (Value is empty OR env var not populated)"
               continue # Go to the next secret name in the loop
            fi

            echo "Attempting sync for: $secret_name"

            # Blunt "Upsert": Try create, ignore result, then try put, ignore result
            aws secretsmanager create-secret --name "$secret_name" --secret-string "$secret_value" --region "$AWS_REGION" || true
            aws secretsmanager put-secret-value --secret-id "$secret_name" --secret-string "$secret_value" --region "$AWS_REGION" || true
          done

          echo "Minimal sync attempt finished. Check AWS Secrets Manager manually."